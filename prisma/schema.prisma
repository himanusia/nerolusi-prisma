generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  user
  teacher
  admin
}

enum PackageType {
  tryout
  drill
}

enum SubtestType {
  pu
  ppu
  pbm
  pk
  pm
  lbe
  lbi
  materi
}

enum QuestionType {
  essay
  mulChoice
  mulAnswer
}

enum VideoType {
  rekaman
  materi
}

enum SubjectType {
  wajib
  saintek
  soshum
}

// Models
model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          Role           @default(user)
  enrolledUtbk  Boolean        @default(false)
  enrolledTka   Boolean        @default(false)
  token         Int            @default(0)
  createdAt     DateTime       @default(now())
  classid       Int?
  class         Class?         @relation(fields: [classid], references: [id])
  accounts      Account[]      
  sessions      Session[]      
  userAnswers   UserAnswer[] 
  quizSession   QuizSession[]
  UserMateriProgress UserMateriProgress[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? 
  access_token             String? 
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? 
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Class {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now())
  users     User[]
  packages  Package[]
}

model Subject {
  id        Int      @id @default(autoincrement())
  name      String
  type      SubjectType
  createdAt DateTime @default(now())
  materials  Material[]
}

model Material {
  id        Int      @id @default(autoincrement())
  index     Int
  name      String
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  topics    Topic[]
}

model Topic {
  id        Int      @id @default(autoincrement())
  index     Int
  name      String
  materialId Int
  createdAt DateTime @default(now())
  videoId   String      @unique
  video     Video    @relation(fields: [videoId], references: [id])
  subtestId String      @unique
  subtest   Subtest  @relation(fields: [subtestId], references: [id])
  material   Material  @relation(fields: [materialId], references: [id], onDelete: Cascade)
  userProgress UserMateriProgress[]
}

model Package {
  id          String       @id @default(cuid())
  name        String
  type        PackageType
  classId     Int
  TOstart     DateTime?
  TOend       DateTime?
  tokenPrice  Int?
  createdAt   DateTime     @default(now())
  subtests    Subtest[]
  class       Class?       @relation(fields: [classId], references: [id], onDelete: Cascade)
  quizSession QuizSession[]
}

model Subtest {
  id          String     @id @default(cuid())
  type        SubtestType
  packageId   String?
  duration    Int?
  package     Package?     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  questions   Question[]
  quizSession QuizSession[]
  topics    Topic?
}

model Question {
  id                  Int           @id @default(autoincrement())
  index               Int
  content             String        
  imageUrl            String?
  type                QuestionType
  score               Int
  explanation         String?
  answers             Answer[]    
  subtestId           String         
  subtest             Subtest      @relation(fields: [subtestId], references: [id], onDelete: Cascade)
  userAnswers         UserAnswer[] 
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String   
  index      Int
  isCorrect  Boolean  @default(false)       
  questionId Int
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswerChoice[]
}

model UserAnswer {
  id            Int         @id @default(autoincrement())
  essayAnswer   String?
  questionId    Int
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId        String 
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizSessionId String
  quizSession   QuizSession @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  answerChoices UserAnswerChoice[]

  @@unique([userId, quizSessionId, questionId], name: "userId_quizSessionId_questionId")
}

model UserAnswerChoice {
  id            Int      @id @default(autoincrement())
  userAnswerId  Int
  userAnswer    UserAnswer @relation(fields: [userAnswerId], references: [id], onDelete: Cascade)
  answerId Int
  answer  Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)

  @@unique([userAnswerId, answerId], name: "userAnswerId_answerId")
}

model UserMateriProgress {
  id      String     @id @default(cuid())
  userId    String
  topicId  Int      
  isDrillCompleted Boolean @default(false)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  duration    Int
  createdAt   DateTime @default(now())
  type        VideoType @default(rekaman)
  topic       Topic?
}

model Folder {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  files       File[]
}

model File {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  url         String
  folderId    Int
  folder      Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuizSession {
  id           String         @id @default(cuid())
  startTime    DateTime    @default(now())
  endTime      DateTime?
  duration     Int
  score        Int?
  numQuestion  Int?
  numCorrect   Int?
  userId       String   
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId    String?
  package      Package?     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  subtestId    String
  subtest      Subtest     @relation(fields: [subtestId], references: [id], onDelete: Cascade)
  userAnswers  UserAnswer[]
  
  @@unique([userId, subtestId], name: "unique_user_subtest")
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String?
  content     String?  
  url         String?
  createdAt   DateTime @default(now())
}
